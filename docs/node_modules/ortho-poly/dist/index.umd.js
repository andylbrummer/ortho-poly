(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.ortho-poly = global.ortho-poly || {})));
}(this, function (exports) { 'use strict';

  function polynomial(v) {
    return {
      v: v,
      f: function f(x) {
        var il = v.length;
        if (il === 0) return 0;
        if (il === 1) return v[0];
        var r = v[il - 1] * x + v[il - 2];
        for (var i = il - 2; i--;) {
          r = r * x + v[i];
        }
        return r;
      },

      a: function a(p) {
        var n = [];
        var v2 = p.v;
        var max = Math.max(v.length, v2.length);
        for (var i = max; i--;) {
          n[i] = (v[i] || 0) + (v2[i] || 0);
        }
        return polynomial(n);
      },
      // Subtract two polynomials
      sub: function sub(p) {
        var n = [];
        var v2 = p.v;
        var max = Math.max(v.length, v2.length);
        for (var i = max; i--;) {
          n[i] = (v[i] || 0) - (v2[i] || 0);
        }
        return polynomial(n);
      },
      // Multiply two polynomials
      m: function m(p) {
        var n = [];
        var v2 = p.v;
        for (var i = v.length; i--;) {
          for (var j = v2.length; j--;) {
            n[i + j] = (n[i + j] || 0) + v[i] * v2[j];
          }
        }
        return polynomial(n);
      },
      // multiply by a scalar
      s: function s(_s) {
        var n = [];
        for (var i = v.length; i--;) {
          n[i] = _s * v[i];
        }
        return polynomial(n);
      },

      // Multiply the underlying variable by a scalar factor and apply it to the polynomial
      // ie 3(2x)^2-(2x)^3 = 12x^2-8x^3
      ps: function ps(s) {
        var n = [];
        var m = 1;
        for (var i = v.length; i--;) {
          n[i] = m * v[i];
          m *= s;
        }
        return polynomial(n);
      },

      // Calculate the derivative of the polynomial
      dx: function dx() {
        var n = [];
        for (var i = v.length; i-- > 0;) {
          n[i - 1] = i * v[i];
        }
        return polynomial(n);
      },
      print: function print() {
        var vl = v.length;
        var r = '';
        var plus = '';
        if (vl === 0) return '0';
        if (vl === 1) return v[0].toString();

        for (var i = vl; i--;) {
          var c = v[i];
          if (c === 0) continue;

          if (c >= 0) r += plus;
          if (c !== 1 || i === 0) r += v[i].toString();

          if (i === 1) r += 'x';
          if (i !== 0 && i !== 1) r += 'x<sup>' + i.toString() + '</sup>';
          plus = '+';
        }
        return r;
      },

      // Get a simple array version of the polynomial indexed by variable power.
      toArray: function toArray() {
        return v;
      }
    };
  }

  function laguerre(n, alpha) {
    if (n === 0) return polynomial([1]);
    if (n === 1) return polynomial([1 + alpha, -1]);

    var k = n - 1;
    var l1 = polynomial([2 * k + 1 + alpha, -1]).m(laguerre(k, alpha));
    var l2 = polynomial([-(k + alpha)]).m(laguerre(k - 1, alpha));

    return l1.a(l2).s(1 / n);
  }

  function legendre(n) {
    if (n === 0) return polynomial([1]);
    if (n === 1) return polynomial([0, 1]);

    var k = n - 1;
    var f1 = polynomial([0, 2 * k + 1]).m(legendre(k));
    var f2 = legendre(n - 2).s(-k);

    return f2.a(f1).s(1 / n);
  }

  function hermite(n) {
    if (n === 0) return polynomial([1]);
    if (n === 1) return polynomial([0, 2]);

    var k = n - 1;
    var f1 = polynomial([0, 2]).m(hermite(k));
    var f2 = hermite(k - 1).s(-2 * k);

    return f2.a(f1);
  }

  function chebyshev(n) {
    if (n === 0) return polynomial([1]);
    if (n === 1) return polynomial([0, 1]);
    var f1 = polynomial([0, 2]).m(chebyshev(n - 1));
    return f1.sub(chebyshev(n - 2));
  }

  exports.polynomial = polynomial;
  exports.laguerre = laguerre;
  exports.legendre = legendre;
  exports.hermite = hermite;
  exports.chebyshev = chebyshev;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.umd.js.map